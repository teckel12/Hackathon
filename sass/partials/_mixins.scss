

@mixin rgba($color, $opacity) {
  background: $color;
  background: rgba($color, $opacity);
}

//thanks to Eric Meyer for https://github.com/ericam/susy
//and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/
@mixin _rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 16px !global; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

//==== Simple SCSS mixin to create CSS triangles
//==== Example: @include css-triangle ("up", 10px, #fff);
@mixin triangle ($direction: "down", $size: 20px, $color: #000) {
  width: 0; 
  height: 0;
  border-left: $size solid #{setTriangleColor($direction, "left", $color)};
  border-right: $size solid #{setTriangleColor($direction, "right", $color)};
  border-bottom: $size solid #{setTriangleColor($direction, "bottom", $color)};
  border-top: $size solid #{setTriangleColor($direction, "top", $color)};
}

//Utility function to return the relevant colour depending on what type of arrow it is
@function setTriangleColor($direction, $side, $color) {

  @if $direction == "left" and $side == "right" 
  or  $direction == "right" and $side == "left" 
  or $direction == "down" and $side == "top" 
  or $direction == "up" and $side == "bottom" {
    @return $color
  } @else {
    @return "transparent";
  }

}

//
//
// Burger Menu Icon
// Usage:
//
//  .menu-button {
//    display: inline-block;
//    padding: .5em;
//    background-color: #fafafa;
//    border: 1px solid #ccc;
//  }
//
//  .burger-icon {
//    @include burger(25px, 3px, 5px, #444);
//  }
//
//  .menu-button.is-active .burger-icon {
//    @include burger-to-cross;
//  }
//
//
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
    $burger-height: $height !global;
    $burger-gutter: $gutter !global;

    position: relative;
    margin-top: $height + $gutter;
    margin-bottom: $height + $gutter;

    &, &:before, &:after {
        display: block;
        width: $width;
        height: $height;
        background-color: $color;
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }
        transition-property: background-color transform;
        transition-duration: $transition-duration;
    }

    &:before, &:after {
        position: absolute;
        content: "";
    }

    &:before {
        top: -($height + $gutter);
    }

    &:after {
        top: $height + $gutter;
    }
}


// Select parts of the burger

@mixin burger-parts {
    &, &:before, &:after {
        @content;
    }
}

@mixin burger-top {
    &:before {
        @content;
    }
}

@mixin burger-middle {
    & {
        @content;
    }
}

@mixin burger-bottom {
    &:after {
        @content;
    }
}

// Burger animations

@mixin burger-to-cross {
    & {
        background-color: transparent;
    }
    &:before {
        transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }
    &:after {
        transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
}

// Tipsy.sass v1.0.2
// A mixin tooltip CSS using Sass
// Copyright 2014, Dang Van Thanh

@mixin tipsy($gravity, $color, $radius) {
  position: relative;
  display: inline-block;
  &:hover, &:focus {
    &:before, &:after {
      visibility: visible;
      opacity: 1;
      transition: .2s .3s;
      -webkit-transition: .2s .3s;
      -moz-transition: .2s .3s;
    }
  }
  &:before, &:after {
    transform: translate3d(0, 0, 0);
    position: absolute;
    visibility: hidden;
    opacity: 0;
    z-index: 1000000;
    pointer-events: none;
    transition: .2s;
    -webkit-transition: .2s;
    -moz-transition: .2s;
  }
  &:before {
    content: '';
    border: 5px solid transparent;
    bottom: 0;
    z-index: 1000001;
  }
  &:after {
    content: attr(data-tipsy);
    background-color: $color;
    border-radius: $radius;
    color: white;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, .2);
    padding: 5px 10px;
    white-space: nowrap;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, .2);
  }

  @if $gravity == 'nw' {
    &:hover, &:focus {
      &:before {
        bottom: -15%;
      }
      &:after {
        top: 115%;
      }
    }
    &:before {
      border-bottom-color: $color;
      left: 60%;
      bottom: -35%;
    }
    &:after {
      left: 50%;
      top: 135%;
    }
  } @else if $gravity == 'n' {
    &:hover, &:focus {
      &:before {
        bottom: -15%;
      }
      &:after {
        top: 115%;
      }
    }
    &:before, &:after {
      left: 50%;
      transform: translateX(-50%);
      -webkit-transform: translateX(-50%);
      -moz-transform: translateX(-50%);
    }
    &:before {
      border-bottom-color: $color;
      bottom: -35%;
    }
    &:after {
      top: 135%;
    }
  } @else if $gravity == 'ne' {
    &:hover, &:focus {
      &:before {
        bottom: -15%;
      }
      &:after {
        top: 115%;
      }
    }
    &:before {
      border-bottom-color: $color;
      right: 60%;
      bottom: -35%;
    }
    &:after {
      right: 50%;
      top: 135%;
    }
  } @else if $gravity == 'e' {
    &:hover, &:focus {
      &:before {
        left: -15%;
      }
      &:after {
        right: 115%;
      }
    }
    &:before, &:after {
      top: 50%;
      transform: translateY(-50%);
      -webkit-transform: translateY(-50%);
      -moz-transform: translateY(-50%);
    }
    &:before {
      border-left-color: $color;
      left: -35%;
    }
    &:after {
      right: 125%;
    }
  } @else if $gravity == 'se' {
    &:hover, &:focus {
      &:before {
        top: -15%;
      }
      &:after {
        bottom: 115%;
      }
    }
    &:before {
      border-top-color: $color;
      top: -35%;
      right: 60%;
    }
    &:after {
      bottom: 135%;
      right: 50%;
    }
  } @else if $gravity == 's' {
    &:hover, &:focus {
      &:before {
        top: -15%;
      }
      &:after {
        bottom: 115%;
      }
    }
    &:before, &:after {
      left: 50%;
      transform: translateX(-50%);
      -webkit-transform: translateX(-50%);
      -moz-transform: translateX(-50%);
    }
    &:before {
      border-top-color: $color;
      top: -35%;
    }
    &:after {
      bottom: 135%;
    }
  } @else if $gravity == 'sw' {
    &:hover, &:focus {
      &:before {
        top: -15%;
      }
      &:after {
        bottom: 115%;
      }
    }
    &:before {
      border-top-color: $color;
      top: -35%;
      left: 60%;
    }
    &:after {
      bottom: 135%;
      left: 50%;
    }
  } @else if $gravity == 'w' {
    &:hover, &:focus {
      &:before {
        right: -15%;
      }
      &:after {
        left: 115%;
      }
    }
    &:before, &:after {
      top: 50%;
      transform: translateY(-50%);
      -webkit-transform: translateY(-50%);
      -moz-transform: translateY(-50%);
    }
    &:before {
      border-right-color: $color;
      right: -35%;
    }
    &:after {
      left: 135%;
    }
  }
}